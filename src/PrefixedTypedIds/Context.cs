using Microsoft.EntityFrameworkCore;

namespace ManualAutoGeneratedIds;



public class Context : DbContext
{
    public DbSet<Product> Products { get; set; }
    public DbSet<CreditCard> CreditCards { get; set; }
    public DbSet<Normal> Normals { get; set; }

    public Context(DbContextOptions<Context> options) : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.RegisterAllTypedIds();

        // Without Generic Magic
        // modelBuilder.Entity<Product>()
        //     .Property(x => x.Id)
        //     .HasConversion(x => x.Value, x => new ProductId { Value = x, FromDb = true });
        //
        // modelBuilder.Entity<CreditCard>()
        //     .Property(x => x.Id)
        //     .HasConversion(x => x.Value, x => new CreditCardId { Value = x, FromDb = true });
    }

    public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = new())
    {
        this.CorrectEntityStates();
        return base.SaveChangesAsync(cancellationToken);
    }
}

public record CreditCardId : TypedId
{
    protected override string prefix => "cc";
}

public class CreditCard : IHasTypedId<CreditCardId>
{
    public CreditCardId Id { get; set; } = new();
    public string CVC { get; set; } = "";
}

public record ProductId : TypedId
{
    protected override string prefix => "prd";
}

public class Product : IHasTypedId<ProductId>
{
    public ProductId Id { get; set; } = new();
    public string Description { get; set; } = "";
}

public class Normal
{
    public Guid Id { get; set; }
    public string SomeString { get; set; } = "";
}