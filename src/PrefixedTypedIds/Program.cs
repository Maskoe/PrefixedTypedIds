using FastEndpoints;
using FastEndpoints.Swagger;
using ManualAutoGeneratedIds;
using Microsoft.EntityFrameworkCore;

var bld = WebApplication.CreateBuilder();

bld.Services.AddDbContextFactory<Context>(options =>
{
    options.UseNpgsql(bld.Configuration.GetConnectionString("PostgreSQL"), x => x.UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery));
    options.EnableSensitiveDataLogging();
});

bld.Services
    .AddFastEndpoints()
    .SwaggerDocument(x => x.AddTypedIdSchema());

var app = bld.Build();

app.UseFastEndpoints(x => x.RegisterTypedIdSerializers())
    .UseSwaggerGen();

// Without Generic Magic:
// app.UseFastEndpoints(x =>
//     {
//         x.Serializer.Options.Converters.Add(new TypedIdJsonConverter<ProductId>());
//         x.Binding.ValueParserFor<ProductId>(TypedIdExtensions.IdParser<ProductId>);
//         
//         x.Serializer.Options.Converters.Add(new TypedIdJsonConverter<CreditCardId>());
//         x.Binding.ValueParserFor<CreditCardId>(TypedIdExtensions.IdParser<CreditCardId>);
//     })


var ctx = app.Services.CreateScope().ServiceProvider.GetRequiredService<Context>();
await ctx.Database.MigrateAsync();

// Seed database with 5 products and credit cards
if (!ctx.Products.Any())
{
    for (int i = 0; i < 5; i++)
    {
        var prod = new Product();
        var cc = new CreditCard { Person = new() };
        ctx.Products.Add(prod);
        ctx.CreditCards.Add(cc);
    }

    await ctx.SaveChangesAsync();
}

// Experiment to get a feel for duplicate likelyhood
// for (int i = 0; i < 10; i++)
// {
//     var dbRowCount = 100000;
//     var idLength = 6;
//     var ids = Enumerable.Range(0, dbRowCount).Select(x => TypedId.GenerateRandomString(idLength)).ToList();
//     Console.WriteLine($"ids: {ids.Count}, duplicates: {ids.Count - ids.ToHashSet().Count}");
// }

app.Run();